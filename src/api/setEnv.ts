import { config } from "dotenv";
config();

import { IncomingMessage } from "http";
import { ExtraInfo } from ".";
import * as fs from "fs";

type EnvWithValues = {
  key: string;
  value: string;
  comment?: string;
};

export default async function handle(
  req: IncomingMessage,
  res: any,
  params: URLSearchParams,
  resp: Function,
  extra: ExtraInfo
) {
  const userEnvFile = fs.existsSync("./.env");
  if (!userEnvFile) return resp(res, 400, "No .env file found");

  //get body
  let body: Array<EnvWithValues>;
  try {
    const bodyPromise: string = await new Promise((resolve, reject) => {
      let data = "";
      req.on("data", (chunk) => {
        data += chunk;
      });
      req.on("end", () => {
        resolve(data);
      });
    });
    body = JSON.parse(bodyPromise);
  } catch (e) {
    return resp(res, 400, "Invalid JSON");
  }

  let finalEnv = "";

  body.forEach((line) => {
    const key = line.key;
    const value = line.value;

    finalEnv += `${key}=${value}\n`;
  });

  //remove final newline
  finalEnv = finalEnv.slice(0, -1);

  finalEnv = `#Generated by LittleTinyStorage-WebUI at ${new Date().toISOString()}
${finalEnv}
`;

  //copy backup env
  fs.copyFileSync("./.env", `./.env.bak.${new Date().getTime()}`);
  fs.writeFileSync("./.env", finalEnv);

  return resp(res, 204);
}
